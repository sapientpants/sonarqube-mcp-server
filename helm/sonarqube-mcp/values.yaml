# Default values for sonarqube-mcp.

replicaCount: 3

image:
  repository: sapientpants/sonarqube-mcp-server
  pullPolicy: IfNotPresent
  tag: ""  # Overrides the image tag whose default is the chart appVersion.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL

service:
  type: ClusterIP
  port: 3000
  metricsPort: 9090
  annotations: {}

ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: mcp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: sonarqube-mcp-tls
      hosts:
        - mcp.example.com

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
    ephemeral-storage: 5Gi
  requests:
    cpu: 250m
    memory: 512Mi
    ephemeral-storage: 1Gi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - "{{ include \"sonarqube-mcp.name\" . }}"
          topologyKey: kubernetes.io/hostname

config:
  sonarqube:
    baseUrl: https://sonarqube.example.com
    # token: "" # Set via secrets.sonarqubeToken or external secret
  
  transport: http
  
  http:
    port: "3000"
    httpsEnabled: true
    # cert: /tls/tls.crt # Mounted from secret
    # key: /tls/tls.key  # Mounted from secret
  
  oauth:
    issuer: https://auth.example.com
    audience: sonarqube-mcp
    # publicKeyPath: /oauth/public.pem # Mounted from secret
  
  serviceAccounts:
    enabled: true
    healthCheck:
      enabled: true
      interval: 300000
    failover:
      enabled: true
  
  monitoring:
    metrics: true
    metricsPort: "9090"
    tracing: true
    otelEndpoint: http://otel-collector:4318
  
  audit:
    enabled: true
    piiRedaction: true
    retentionDays: "90"
  
  performance:
    httpAgent:
      maxSockets: "100"
      maxFreeSockets: "10"
      timeout: "60000"
    circuitBreaker:
      enabled: true
      timeout: "5000"
      threshold: "50"
    cache:
      permissionTTL: "300000"
      permissionMaxSize: "1000"
      tokenTTL: "3600000"
      tokenMaxSize: "10000"

secrets:
  # Create secrets in-chart (not recommended for production)
  create: true
  
  # SonarQube authentication
  sonarqubeToken: ""
  
  # Service accounts (up to 10 supported)
  serviceAccounts: {}
    # sa1:
    #   username: team-alpha
    #   token: squ_xxxxx
    #   groupPattern: "team-alpha|alpha-.*"
    # sa2:
    #   username: team-beta
    #   token: squ_yyyyy
    #   groupPattern: "team-beta|beta-.*"
  
  # OAuth public key (PEM format)
  oauthPublicKey: |
    -----BEGIN PUBLIC KEY-----
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...
    -----END PUBLIC KEY-----
  
  # TLS certificates
  tls:
    cert: ""
    key: ""

# Use existing secrets
existingSecrets:
  # Name of existing secret containing SONARQUBE_TOKEN
  sonarqubeToken: ""
  # Name of existing secret containing service account credentials
  serviceAccounts: ""
  # Name of existing secret containing OAuth public key
  oauthPublicKey: ""
  # Name of existing TLS secret
  tls: ""

persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  # existingClaim: ""

podDisruptionBudget:
  enabled: true
  minAvailable: 2
  # maxUnavailable: 1

networkPolicy:
  enabled: true
  ingress:
    enabled: true
    namespaceSelector:
      matchLabels:
        name: ingress-nginx
  egress:
    enabled: true
    # Allow DNS
    dns:
      enabled: true
    # Allow HTTPS to external services
    https:
      enabled: true
    # Custom egress rules
    custom: []

rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list"]
    - apiGroups: [""]
      resources: ["pods/status"]
      verbs: ["update", "patch"]

# Additional environment variables
env: []
  # - name: NODE_OPTIONS
  #   value: "--max-old-space-size=2048"

# Additional volumes
volumes: []
  # - name: custom-config
  #   configMap:
  #     name: custom-config

# Additional volume mounts
volumeMounts: []
  # - name: custom-config
  #   mountPath: /config
  #   readOnly: true

# Liveness probe configuration
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Readiness probe configuration
readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

# Startup probe configuration
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 30

# ServiceMonitor for Prometheus Operator
serviceMonitor:
  enabled: false
  interval: 30s
  path: /metrics
  labels: {}
  honorLabels: true
  relabelings: []

# VPA - Vertical Pod Autoscaler
verticalPodAutoscaler:
  enabled: false
  updateMode: "Auto"

# Pod topology spread constraints
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: "{{ include \"sonarqube-mcp.name\" . }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"

# Extra manifests to deploy
extraManifests: []