/// <reference types="jest" />

/**
 * @jest-environment node
 */

import { describe, it, expect, jest, beforeEach } from '@jest/globals';

// Set environment variables for testing
process.env.SONARQUBE_TOKEN = 'test-token';
process.env.SONARQUBE_URL = 'http://localhost:9000';

// Mock axios directly
jest.mock('axios', () => ({
  get: jest.fn().mockImplementation(() =>
    Promise.resolve({
      data: {
        metrics: [],
        paging: { pageIndex: 1, pageSize: 10, total: 0 },
        issues: [],
        component: {},
        components: [],
        measures: [],
      },
    })
  ),
  post: jest.fn().mockImplementation(() =>
    Promise.resolve({
      data: {
        result: 'success',
      },
    })
  ),
}));

// Import the function we want to test
import { nullToUndefined } from '../index.js';

// Now import the handlers - these will use our mocked handlers
import {
  metricsHandler,
  issuesHandler,
  componentMeasuresHandler,
  componentsMeasuresHandler,
  measuresHistoryHandler,
} from '../index.js';

// Simple tests that don't require HTTP calls
describe('Utility Function Tests', () => {
  describe('nullToUndefined', () => {
    it('should convert null to undefined', () => {
      expect(nullToUndefined(null)).toBeUndefined();
    });

    it('should pass through non-null values', () => {
      expect(nullToUndefined('value')).toBe('value');
      expect(nullToUndefined(123)).toBe(123);
      expect(nullToUndefined(0)).toBe(0);
      expect(nullToUndefined(false)).toBe(false);
      expect(nullToUndefined(undefined)).toBeUndefined();
    });
  });
});

// Lambda handler tests
describe('Handlers', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // Test metricsHandler
  it('metricsHandler should transform parameters correctly', async () => {
    const params = { page: 5, page_size: 20 };
    const result = await metricsHandler(params);

    expect(result).toBeDefined();
    expect(result.content).toBeDefined();
    expect(result.content).toHaveLength(1);
    expect(result.content[0].type).toBe('text');
  });

  // Test issuesHandler
  it('issuesHandler should handle parameters correctly', async () => {
    const params = {
      project_key: 'test-project',
      severity: 'MAJOR',
      statuses: ['OPEN', 'CONFIRMED'],
    };

    const result = await issuesHandler(params);

    expect(result).toBeDefined();
    expect(result.content).toBeDefined();
    expect(result.content).toHaveLength(1);
    expect(result.content[0].type).toBe('text');
  });

  // Test componentMeasuresHandler
  it('componentMeasuresHandler should transform string metric_keys to array', async () => {
    const params = {
      component: 'test-component',
      metric_keys: 'coverage',
    };

    const result = await componentMeasuresHandler(params);

    expect(result).toBeDefined();
    expect(result.content).toBeDefined();
    expect(result.content).toHaveLength(1);
    expect(result.content[0].type).toBe('text');
  });

  // Test componentsMeasuresHandler
  it('componentsMeasuresHandler should transform string parameters', async () => {
    const params = {
      component_keys: 'test-component',
      metric_keys: 'coverage',
      page: 2,
      page_size: 20,
    };

    const result = await componentsMeasuresHandler(params);

    expect(result).toBeDefined();
    expect(result.content).toBeDefined();
    expect(result.content).toHaveLength(1);
    expect(result.content[0].type).toBe('text');
  });

  // Test measuresHistoryHandler
  it('measuresHistoryHandler should transform string parameters', async () => {
    const params = {
      component: 'test-component',
      metrics: 'coverage',
      from: '2023-01-01',
      to: '2023-12-31',
    };

    const result = await measuresHistoryHandler(params);

    expect(result).toBeDefined();
    expect(result.content).toBeDefined();
    expect(result.content).toHaveLength(1);
    expect(result.content[0].type).toBe('text');
  });
});
