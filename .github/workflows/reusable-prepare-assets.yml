# =============================================================================
# REUSABLE WORKFLOW: Prepare Release Assets
# PURPOSE: Centralized workflow for preparing all release artifacts
# USAGE: Called from main workflow to build Docker images, binaries, etc.
# =============================================================================

name: Prepare Release Assets

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number for the release'
        required: true
        type: string
      tag_sha:
        description: 'SHA of the version tag for artifact naming'
        required: true
        type: string
      build_artifact:
        description: 'Name of the pre-built TypeScript artifact'
        required: true
        type: string
      enable_docker:
        description: 'Whether to build Docker images'
        required: false
        type: boolean
        default: false
      docker_platforms:
        description: 'Docker platforms to build for'
        required: false
        type: string
        default: 'linux/amd64'
      enable_npm:
        description: 'Whether to prepare NPM package'
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: 'Version number (pass-through)'
        value: ${{ inputs.version }}
      docker_built:
        description: 'Whether Docker image was built'
        value: ${{ inputs.enable_docker == true && 'true' || 'false' }}
      npm_built:
        description: 'Whether NPM package was built'
        value: ${{ inputs.enable_npm == true && 'true' || 'false' }}
      assets_summary:
        description: 'Summary of all prepared assets'
        value: ${{ jobs.summary.outputs.summary }}

jobs:
  # =============================================================================
  # DOCKER BUILD JOB
  # =============================================================================

  docker:
    name: Build Docker Image
    # Job always exists but is conditionally executed
    if: inputs.enable_docker == true
    uses: ./.github/workflows/reusable-docker.yml
    with:
      platforms: ${{ inputs.docker_platforms }}
      save-artifact: true
      artifact-name: 'docker-image-${{ inputs.tag_sha }}'
      image-name: 'sonarqube-mcp-server'
      version: ${{ inputs.version }}
      tag_sha: ${{ inputs.tag_sha }}
      build_artifact: ${{ inputs.build_artifact }}

  # =============================================================================
  # NPM PACKAGE PREPARATION JOB
  # =============================================================================

  npm:
    name: Prepare NPM Package
    # Job always exists but is conditionally executed
    if: inputs.enable_npm == true
    runs-on: ubuntu-latest
    outputs:
      built: ${{ steps.pack.outputs.built }}
      artifact_name: ${{ steps.pack.outputs.artifact_name }}
      tarball_name: ${{ steps.pack.outputs.tarball_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build_artifact }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.0
          run_install: false
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        # Install all dependencies for packaging (dev and prod)
        run: pnpm install --frozen-lockfile

      - name: Create NPM package
        id: pack
        run: |
          # Create the NPM package tarball
          # Use tail -1 to get just the filename, as npm pack may output additional text
          NPM_PACKAGE=$(npm pack 2>/dev/null | tail -1)
          echo "üì¶ Created NPM package: $NPM_PACKAGE"

          # Generate metadata using tag SHA for consistent naming
          ARTIFACT_NAME="npm-package-${{ inputs.version }}-${{ inputs.tag_sha }}"
          {
            echo "artifact_name=$ARTIFACT_NAME"
            echo "tarball_name=$NPM_PACKAGE"
            echo "built=true"
          } >> $GITHUB_OUTPUT

          # Create manifest of included files for verification
          npm pack --dry-run --json 2>/dev/null | jq -r '.[0].files[].path' > npm-package-manifest.txt
          echo "üìã Package contains $(wc -l < npm-package-manifest.txt) files"

      - name: Upload NPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ inputs.version }}-${{ inputs.tag_sha }}
          path: |
            *.tgz
            npm-package-manifest.txt
          retention-days: 7

      - name: Generate attestations for NPM package
        # Only runs when id-token permission is available (required for attestations)
        if: env.ACTIONS_ID_TOKEN_REQUEST_URL != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: '*.tgz'

  # =============================================================================
  # FUTURE ASSET JOBS
  # Additional jobs for other asset types can be added here
  # Examples:
  #   - binaries: Build compiled binaries for different platforms
  #   - installers: Create platform-specific installers
  #   - docs: Bundle documentation
  # =============================================================================

  # =============================================================================
  # SUMMARY JOB
  # Aggregates results from all asset preparation jobs
  # =============================================================================

  summary:
    name: Summarize Assets
    runs-on: ubuntu-latest
    # Always run to provide summary, even if some assets failed or were skipped
    if: always()
    # Depends on all asset jobs (they may be skipped based on conditions)
    needs: [docker, npm]
    outputs:
      summary: ${{ steps.generate.outputs.summary }}
    steps:
      - name: Generate assets summary
        id: generate
        run: |
          echo "üì¶ Release Assets Summary for v${{ inputs.version }}"
          echo "================================================"

          SUMMARY="Release assets for v${{ inputs.version }}:"

          # Docker status - check if job exists and its result
          if [ "${{ inputs.enable_docker }}" == "true" ]; then
            # Job was supposed to run, check its result
            DOCKER_RESULT="${{ needs.docker.result }}"
            if [ "$DOCKER_RESULT" == "success" ]; then
              echo "‚úÖ Docker image: Successfully built for ${{ inputs.docker_platforms }}"
              SUMMARY="$SUMMARY\n  ‚úÖ Docker image (${{ inputs.docker_platforms }})"
            elif [ "$DOCKER_RESULT" == "skipped" ]; then
              echo "‚è≠Ô∏è Docker image: Skipped"
              SUMMARY="$SUMMARY\n  ‚è≠Ô∏è Docker image (skipped)"
            elif [ "$DOCKER_RESULT" == "failure" ]; then
              echo "‚ùå Docker image: Build failed"
              SUMMARY="$SUMMARY\n  ‚ùå Docker image (failed)"
            elif [ "$DOCKER_RESULT" == "cancelled" ]; then
              echo "üö´ Docker image: Build cancelled"
              SUMMARY="$SUMMARY\n  üö´ Docker image (cancelled)"
            else
              echo "‚ùì Docker image: Unknown result ($DOCKER_RESULT)"
              SUMMARY="$SUMMARY\n  ‚ùì Docker image (unknown: $DOCKER_RESULT)"
            fi
          else
            echo "‚è≠Ô∏è Docker image: Disabled"
            SUMMARY="$SUMMARY\n  ‚è≠Ô∏è Docker image (disabled)"
          fi

          # NPM package status
          if [ "${{ inputs.enable_npm }}" == "true" ]; then
            # Job was supposed to run, check its result
            NPM_RESULT="${{ needs.npm.result }}"
            if [ "$NPM_RESULT" == "success" ]; then
              echo "‚úÖ NPM package: Successfully prepared for v${{ inputs.version }}"
              SUMMARY="$SUMMARY\n  ‚úÖ NPM package (v${{ inputs.version }})"
            elif [ "$NPM_RESULT" == "skipped" ]; then
              echo "‚è≠Ô∏è NPM package: Skipped"
              SUMMARY="$SUMMARY\n  ‚è≠Ô∏è NPM package (skipped)"
            elif [ "$NPM_RESULT" == "failure" ]; then
              echo "‚ùå NPM package: Preparation failed"
              SUMMARY="$SUMMARY\n  ‚ùå NPM package (failed)"
            elif [ "$NPM_RESULT" == "cancelled" ]; then
              echo "üö´ NPM package: Preparation cancelled"
              SUMMARY="$SUMMARY\n  üö´ NPM package (cancelled)"
            else
              echo "‚ùì NPM package: Unknown result ($NPM_RESULT)"
              SUMMARY="$SUMMARY\n  ‚ùì NPM package (unknown: $NPM_RESULT)"
            fi
          else
            echo "‚è≠Ô∏è NPM package: Disabled"
            SUMMARY="$SUMMARY\n  ‚è≠Ô∏è NPM package (disabled)"
          fi

          # Future assets would be added to the summary here

          # Output for use in other jobs
          {
            echo "summary<<EOF"
            echo -e "$SUMMARY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          # Also display in the job log
          echo ""
          echo "Final Summary:"
          echo -e "$SUMMARY"

          # Fail the job if any critical assets failed
          FAILED=false
          if [ "${{ inputs.enable_docker }}" == "true" ]; then
            DOCKER_RESULT="${{ needs.docker.result }}"
            if [ "$DOCKER_RESULT" == "failure" ]; then
              echo "‚ùå Docker build failed"
              FAILED=true
            fi
          fi

          if [ "${{ inputs.enable_npm }}" == "true" ]; then
            NPM_RESULT="${{ needs.npm.result }}"
            if [ "$NPM_RESULT" == "failure" ]; then
              echo "‚ùå NPM package preparation failed"
              FAILED=true
            fi
          fi

          if [ "$FAILED" == "true" ]; then
            echo ""
            echo "‚ùå Critical asset preparation failed. Aborting release."
            exit 1
          fi
