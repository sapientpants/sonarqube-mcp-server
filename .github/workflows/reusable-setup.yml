# =============================================================================
# REUSABLE WORKFLOW: Environment Setup
# PURPOSE: Standardized Node.js/pnpm setup with caching for all workflows
# USAGE: Called by other workflows to ensure consistent environment
# OUTPUTS: node_modules and dist artifacts for downstream jobs
# =============================================================================

name: Reusable Setup

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to install (should match package.json engines)'
        type: string
        default: '22' # UPDATE: When upgrading Node.js in package.json
      pnpm-version:
        description: 'pnpm version to install (should match packageManager in package.json)'
        type: string
        default: '10.17.1' # UPDATE: When upgrading pnpm in package.json
      install-deps:
        description: 'Whether to install npm dependencies'
        type: boolean
        default: true
      build:
        description: 'Whether to run the build command'
        type: boolean
        default: false

# EXAMPLE USAGE:
# jobs:
#   setup:
#     uses: ./.github/workflows/reusable-setup.yml
#     with:
#       node-version: '22'
#       pnpm-version: '10.17.1'
#       install-deps: true
#       build: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better git operations

      - name: Install pnpm
        # pnpm must be installed before Node.js setup for caching
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm-version }}
          run_install: false # Dependencies installed in separate step
          standalone: true # Faster installation method

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm # Automatically caches pnpm store

      - name: Get pnpm store directory
        # Determine pnpm's global store location for caching
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        # Cache pnpm store to speed up dependency installation
        # Cache key includes lock file hash to bust cache on dep changes
        # Saves 1-3 minutes on subsequent runs
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-  # Fallback to partial cache match

      - name: Install dependencies
        if: inputs.install-deps
        # frozen-lockfile ensures reproducible installs
        # FAILS IF: pnpm-lock.yaml doesn't match package.json
        run: pnpm install --frozen-lockfile

      - name: Build
        if: inputs.build
        # Build TypeScript to JavaScript
        # FAILS IF: TypeScript errors, missing dependencies
        run: pnpm build

      - name: Upload node_modules
        # Share installed dependencies with other jobs
        # Reduces install time in parallel workflows
        if: inputs.install-deps
        uses: actions/upload-artifact@v4
        with:
          name: node-modules-${{ github.sha }}
          path: node_modules/
          retention-days: 1 # Auto-cleanup after 1 day

      - name: Upload dist
        # Share built artifacts with other jobs
        if: inputs.build
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 1 # Auto-cleanup after 1 day
