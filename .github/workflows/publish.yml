# =============================================================================
# WORKFLOW: Multi-Channel Package Publishing
# PURPOSE: Distribute releases to NPM, GitHub Packages, and Docker Hub
# TRIGGERS: GitHub release publication or manual dispatch
# OUTPUTS: Published packages to configured registries
# =============================================================================

name: Publish

on:
  release:
    types: [published] # Triggered when a GitHub release is published
  workflow_dispatch: # Manual trigger for re-publishing or testing
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v1.2.3)'
        required: true
        type: string

# Global environment variables for consistency
env:
  PNPM_VERSION: 10.17.0 # Pinned: Must match packageManager in package.json
  NODE_VERSION: 22 # Pinned: Must match engines.node in package.json

# SECURITY: Minimal required permissions
# contents: read - Checkout code at release tag
# packages: write - Publish to GitHub Packages
# id-token: write - Generate provenance for npm
permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # =============================================================================
  # NPM PUBLISHING
  # Publishes package to npm registry with provenance
  # =============================================================================

  npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    # Only runs if ENABLE_NPM_RELEASE variable is set to 'true'
    # Configure in Settings > Secrets and variables > Variables
    if: vars.ENABLE_NPM_RELEASE == 'true'
    permissions:
      contents: read
      id-token: write # Required for npm provenance
      actions: read # Required to download artifacts
    steps:
      - name: Determine version
        id: version
        # Extract version from release tag or manual input
        # Strips 'v' prefix to get semver (v1.2.3 -> 1.2.3)
        run: |
          VERSION="${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Publishing to NPM: $VERSION"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # IMPORTANT: Checkout the exact release tag, not latest main
          # This ensures we publish exactly what was released
          ref: ${{ steps.version.outputs.tag }}

      - name: Setup Node.js
        # Node.js is required for npm publish command
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Configure npm registry for authentication
          registry-url: 'https://registry.npmjs.org'

      - name: Determine artifact source
        id: artifact
        # Find the correct NPM package artifact from the release build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the commit SHA for this release tag
          TAG_NAME="${{ steps.version.outputs.tag }}"
          REPO="${{ github.repository }}"

          # Fetch tag information from GitHub API
          TAG_API_URL="https://api.github.com/repos/$REPO/git/refs/tags/$TAG_NAME"
          TAG_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_API_URL)
          TAG_BODY=$(echo "$TAG_RESPONSE" | head -n -1)
          TAG_STATUS=$(echo "$TAG_RESPONSE" | tail -n 1)

          if [ "$TAG_STATUS" != "200" ]; then
            echo "❌ GitHub API request failed for $TAG_API_URL with status $TAG_STATUS"
            echo "Response: $TAG_BODY"
            exit 1
          fi

          # Extract the object SHA and type
          OBJECT_TYPE=$(echo "$TAG_BODY" | jq -r '.object.type')
          OBJECT_SHA=$(echo "$TAG_BODY" | jq -r '.object.sha')

          # If it's an annotated tag, dereference to get the commit
          if [ "$OBJECT_TYPE" = "tag" ]; then
            TAG_OBJ_URL="https://api.github.com/repos/$REPO/git/tags/$OBJECT_SHA"
            TAG_OBJ_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_OBJ_URL)
            TAG_OBJ_BODY=$(echo "$TAG_OBJ_RESPONSE" | head -n -1)
            TAG_OBJ_STATUS=$(echo "$TAG_OBJ_RESPONSE" | tail -n 1)

            if [ "$TAG_OBJ_STATUS" != "200" ]; then
              echo "❌ GitHub API request failed for $TAG_OBJ_URL with status $TAG_OBJ_STATUS"
              echo "Response: $TAG_OBJ_BODY"
              exit 1
            fi

            RELEASE_SHA=$(echo "$TAG_OBJ_BODY" | jq -r '.object.sha')
          else
            RELEASE_SHA="$OBJECT_SHA"
          fi

          if [ -z "$RELEASE_SHA" ] || [ "$RELEASE_SHA" = "null" ]; then
            echo "❌ Could not find commit SHA for tag $TAG_NAME"
            exit 1
          fi

          echo "commit_sha=$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "artifact_name=npm-package-${{ steps.version.outputs.version }}-$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "📦 Looking for NPM artifact from commit: $RELEASE_SHA"

      - name: Try to download pre-built NPM package
        id: download
        # Download the pre-built, pre-scanned NPM package from main workflow
        # This ensures we publish exactly what was tested
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: ./npm-artifact

      - name: Use pre-built package or build from source
        run: |
          if [ -d ./npm-artifact ]; then
            # Check if any .tgz files exist
            TARBALL=$(find ./npm-artifact -name "*.tgz" -type f | head -1)
            if [ -n "$TARBALL" ]; then
              echo "✅ Using pre-built NPM package from main workflow"
              echo "📦 Extracting: $TARBALL"
              tar -xzf "$TARBALL"

              # The package extracts to a 'package' directory
              # We need to move its contents to the current directory
              if [ -d package ]; then
                cp -r package/* .
                rm -rf package
              fi

              echo "📋 Verified package contents from manifest"
              if [ -f ./npm-artifact/npm-package-manifest.txt ]; then
                echo "Package contains $(wc -l < ./npm-artifact/npm-package-manifest.txt) files"
              fi
            fi
          else
            echo "⚠️ Pre-built NPM package not found, building from source"
            echo "This may happen if the main workflow didn't have ENABLE_NPM_RELEASE set"

            # Install dependencies and build from source as fallback
            npm install -g pnpm@${{ env.PNPM_VERSION }}
            pnpm install --frozen-lockfile
            pnpm build
          fi

      - name: Check NPM token
        id: check-npm
        # Gracefully handle missing NPM_TOKEN
        # Allows workflow to succeed even without npm publishing
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
            echo "✅ NPM_TOKEN is configured"
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
            echo "⚠️ NPM_TOKEN is not configured, skipping publish"
            # To fix: Add NPM_TOKEN secret in Settings > Secrets
          fi

      - name: Publish to NPM
        if: steps.check-npm.outputs.has_token == 'true'
        run: |
          # Remove private flag to allow public publishing
          jq 'del(.private)' package.json > tmp.json && mv tmp.json package.json
          # Publish with provenance for supply chain security
          # --provenance creates a signed attestation of the build
          npm publish --provenance --access public
        env:
          # SECURITY: NPM_TOKEN required for authentication
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # =============================================================================
  # GITHUB PACKAGES PUBLISHING
  # Publishes package to GitHub's npm registry
  # =============================================================================

  github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    # Only runs if ENABLE_GITHUB_PACKAGES variable is set
    # Useful for private packages within organization
    if: vars.ENABLE_GITHUB_PACKAGES == 'true'
    permissions:
      contents: read
      packages: write # Required to publish to GitHub Packages
      id-token: write # Required for provenance
      actions: read # Required to download artifacts
    steps:
      - name: Determine version
        id: version
        run: |
          VERSION="${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Publishing to GitHub Packages: $VERSION"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.version.outputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # GitHub Packages npm registry URL
          registry-url: 'https://npm.pkg.github.com'

      - name: Determine artifact source
        id: artifact
        # Find the correct NPM package artifact (same as npm job)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the commit SHA for this release tag
          TAG_NAME="${{ steps.version.outputs.tag }}"
          REPO="${{ github.repository }}"

          # Fetch tag information from GitHub API
          TAG_API_URL="https://api.github.com/repos/$REPO/git/refs/tags/$TAG_NAME"
          TAG_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_API_URL)
          TAG_BODY=$(echo "$TAG_RESPONSE" | head -n -1)
          TAG_STATUS=$(echo "$TAG_RESPONSE" | tail -n 1)

          if [ "$TAG_STATUS" != "200" ]; then
            echo "❌ GitHub API request failed for $TAG_API_URL with status $TAG_STATUS"
            echo "Response: $TAG_BODY"
            exit 1
          fi

          # Extract the object SHA and type
          OBJECT_TYPE=$(echo "$TAG_BODY" | jq -r '.object.type')
          OBJECT_SHA=$(echo "$TAG_BODY" | jq -r '.object.sha')

          # If it's an annotated tag, dereference to get the commit
          if [ "$OBJECT_TYPE" = "tag" ]; then
            TAG_OBJ_URL="https://api.github.com/repos/$REPO/git/tags/$OBJECT_SHA"
            TAG_OBJ_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_OBJ_URL)
            TAG_OBJ_BODY=$(echo "$TAG_OBJ_RESPONSE" | head -n -1)
            TAG_OBJ_STATUS=$(echo "$TAG_OBJ_RESPONSE" | tail -n 1)

            if [ "$TAG_OBJ_STATUS" != "200" ]; then
              echo "❌ GitHub API request failed for $TAG_OBJ_URL with status $TAG_OBJ_STATUS"
              echo "Response: $TAG_OBJ_BODY"
              exit 1
            fi

            RELEASE_SHA=$(echo "$TAG_OBJ_BODY" | jq -r '.object.sha')
          else
            RELEASE_SHA="$OBJECT_SHA"
          fi

          if [ -z "$RELEASE_SHA" ] || [ "$RELEASE_SHA" = "null" ]; then
            echo "❌ Could not find commit SHA for tag $TAG_NAME"
            exit 1
          fi

          echo "commit_sha=$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "artifact_name=npm-package-${{ steps.version.outputs.version }}-$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "📦 Looking for NPM artifact from commit: $RELEASE_SHA"

      - name: Try to download pre-built NPM package
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: ./npm-artifact

      - name: Use pre-built package or build from source
        run: |
          if [ -d ./npm-artifact ]; then
            # Check if any .tgz files exist
            TARBALL=$(find ./npm-artifact -name "*.tgz" -type f | head -1)
            if [ -n "$TARBALL" ]; then
              echo "✅ Using pre-built NPM package from main workflow"
              echo "📦 Extracting: $TARBALL"
              tar -xzf "$TARBALL"

              # The package extracts to a 'package' directory
              if [ -d package ]; then
                cp -r package/* .
                rm -rf package
              fi

              echo "📋 Verified package contents"
            fi
          else
            echo "⚠️ Pre-built NPM package not found, building from source"

            # Install dependencies and build from source as fallback
            npm install -g pnpm@${{ env.PNPM_VERSION }}
            pnpm install --frozen-lockfile
            pnpm build
          fi

      - name: Publish to GitHub Packages
        run: |
          # Scope package name to organization (required for GitHub Packages)
          # Changes 'my-package' to '@org/my-package'
          jq '.name = "@${{ github.repository_owner }}/" + .name | del(.private)' package.json > tmp.json && mv tmp.json package.json
          npm publish --access public
        env:
          # SECURITY: Uses GITHUB_TOKEN for authentication
          # Automatically available, no configuration needed
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # DOCKER HUB PUBLISHING
  # Uses pre-built and pre-scanned Docker image from main workflow
  # =============================================================================

  docker:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    # Only runs if ENABLE_DOCKER_RELEASE variable is set
    # Requires DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets
    if: vars.ENABLE_DOCKER_RELEASE == 'true'
    permissions:
      contents: read
      packages: write # Push to GitHub Container Registry if needed
      actions: read # Required to download artifacts
    steps:
      - name: Determine version
        id: version
        run: |
          VERSION="${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "🐳 Publishing Docker image: $VERSION"

      - name: Check Docker credentials
        id: check-docker
        # Validate Docker Hub credentials exist
        # Allows workflow to succeed without Docker publishing
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "✅ Docker Hub credentials are configured"
          else
            echo "has_credentials=false" >> $GITHUB_OUTPUT
            echo "⚠️ Docker Hub credentials are not configured, skipping publish"
            # To fix: Add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN in Settings > Secrets
            exit 0
          fi

      - name: Determine artifact source
        id: artifact
        if: steps.check-docker.outputs.has_credentials == 'true'
        # Find the correct artifact based on the release tag using GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the commit SHA for this release tag using GitHub API
          TAG_NAME="${{ steps.version.outputs.tag }}"
          REPO="${{ github.repository }}"

          # Fetch tag information from GitHub API with authentication
          TAG_API_URL="https://api.github.com/repos/$REPO/git/ref/tags/$TAG_NAME"
          TAG_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_API_URL)
          TAG_BODY=$(echo "$TAG_RESPONSE" | head -n -1)
          TAG_STATUS=$(echo "$TAG_RESPONSE" | tail -n 1)

          if [ "$TAG_STATUS" != "200" ]; then
            echo "❌ GitHub API request failed for $TAG_API_URL with status $TAG_STATUS"
            echo "Response: $TAG_BODY"
            exit 1
          fi

          # Extract the object SHA and type
          OBJECT_TYPE=$(echo "$TAG_BODY" | jq -r '.object.type')
          OBJECT_SHA=$(echo "$TAG_BODY" | jq -r '.object.sha')

          # If it's an annotated tag, we need to dereference to get the commit
          if [ "$OBJECT_TYPE" = "tag" ]; then
            # Fetch the tag object to get the actual commit SHA
            TAG_OBJ_URL="https://api.github.com/repos/$REPO/git/tags/$OBJECT_SHA"
            TAG_OBJ_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -w "\n%{http_code}" $TAG_OBJ_URL)
            TAG_OBJ_BODY=$(echo "$TAG_OBJ_RESPONSE" | head -n -1)
            TAG_OBJ_STATUS=$(echo "$TAG_OBJ_RESPONSE" | tail -n 1)

            if [ "$TAG_OBJ_STATUS" != "200" ]; then
              echo "❌ GitHub API request failed for $TAG_OBJ_URL with status $TAG_OBJ_STATUS"
              echo "Response: $TAG_OBJ_BODY"
              exit 1
            fi

            RELEASE_SHA=$(echo "$TAG_OBJ_BODY" | jq -r '.object.sha')
          else
            # For lightweight tags, the object is already the commit
            RELEASE_SHA="$OBJECT_SHA"
          fi

          if [ -z "$RELEASE_SHA" ] || [ "$RELEASE_SHA" = "null" ]; then
            echo "❌ Could not find commit SHA for tag $TAG_NAME"
            exit 1
          fi

          echo "commit_sha=$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "artifact_name=docker-image-main-$RELEASE_SHA" >> $GITHUB_OUTPUT
          echo "📦 Looking for artifact from commit: $RELEASE_SHA"

      - name: Download Docker image artifact
        # Download the pre-built, pre-scanned image from main workflow
        # This ensures we publish exactly what was tested
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: ./docker-artifact

      - name: Verify artifact exists
        if: steps.check-docker.outputs.has_credentials == 'true'
        run: |
          if [ ! -f ./docker-artifact/docker-image-main-${{ steps.artifact.outputs.commit_sha }}.tar.gz ]; then
            echo "❌ Docker image artifact not found!"
            echo "Expected: ./docker-artifact/docker-image-main-${{ steps.artifact.outputs.commit_sha }}.tar.gz"
            echo "Contents of ./docker-artifact:"
            ls -la ./docker-artifact/ || echo "Directory does not exist"
            echo ""
            echo "This usually means the main workflow didn't build a Docker image."
            echo "Ensure ENABLE_DOCKER_RELEASE was set to 'true' when the release was created."
            exit 1
          fi
          echo "✅ Found Docker image artifact"

      - name: Set up Docker Buildx
        # Required for loading and pushing multi-platform images
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # SECURITY: Authenticate with Docker Hub
        if: steps.check-docker.outputs.has_credentials == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load and push Docker image
        # Load the pre-built image and push with proper tags
        if: steps.check-docker.outputs.has_credentials == 'true'
        run: |
          echo "📥 Decompressing Docker image..."
          gunzip ./docker-artifact/docker-image-main-${{ steps.artifact.outputs.commit_sha }}.tar.gz

          echo "🔄 Loading Docker image..."
          docker load < ./docker-artifact/docker-image-main-${{ steps.artifact.outputs.commit_sha }}.tar

          # The image is already tagged with the version from the main build
          # We need to retag it with the Docker Hub repository name
          # Note: This must match the image-name parameter in main.yml's docker job
          SOURCE_IMAGE_NAME="sonarqube-mcp-server"
          SOURCE_IMAGE="$SOURCE_IMAGE_NAME:${{ steps.version.outputs.version }}"
          TARGET_REPO="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}"

          echo "🏷️ Tagging image for Docker Hub..."
          docker tag "$SOURCE_IMAGE" "$TARGET_REPO:${{ steps.version.outputs.version }}"
          docker tag "$SOURCE_IMAGE" "$TARGET_REPO:latest"

          # Also add major and major.minor tags
          MAJOR=$(echo "${{ steps.version.outputs.version }}" | cut -d. -f1)
          MINOR=$(echo "${{ steps.version.outputs.version }}" | cut -d. -f2)
          docker tag "$SOURCE_IMAGE" "$TARGET_REPO:$MAJOR"
          docker tag "$SOURCE_IMAGE" "$TARGET_REPO:$MAJOR.$MINOR"

          echo "📤 Pushing to Docker Hub..."
          docker push "$TARGET_REPO:${{ steps.version.outputs.version }}"
          docker push "$TARGET_REPO:latest"
          docker push "$TARGET_REPO:$MAJOR"
          docker push "$TARGET_REPO:$MAJOR.$MINOR"

          echo "✅ Docker image published successfully"

  # =============================================================================
  # NOTIFICATION
  # Send status updates to team communication channels
  # =============================================================================

  notify:
    name: Notify
    if: always() # Run even if publishing jobs fail
    needs: [npm, docker, github-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Check Slack webhook
        id: check-slack
        # Gracefully handle missing Slack configuration
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "has_webhook=true" >> $GITHUB_OUTPUT
          else
            echo "has_webhook=false" >> $GITHUB_OUTPUT
            # Optional: Configure SLACK_WEBHOOK in Settings > Secrets
          fi

      - name: Send Slack notification
        # Send release status to Slack channel
        # Shows success/skip/failure for each distribution channel
        if: steps.check-slack.outputs.has_webhook == 'true'
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "🚀 Release ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}",
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {"type": "mrkdwn", "text": "*Repo:*\n${{ github.repository }}"},
                    {"type": "mrkdwn", "text": "*NPM:*\n${{ needs.npm.result == 'success' && '✅' || needs.npm.result == 'skipped' && '⏭️' || '❌' }}"},
                    {"type": "mrkdwn", "text": "*Docker:*\n${{ needs.docker.result == 'success' && '✅' || needs.docker.result == 'skipped' && '⏭️' || '❌' }}"},
                    {"type": "mrkdwn", "text": "*GitHub:*\n${{ needs.github-packages.result == 'success' && '✅' || needs.github-packages.result == 'skipped' && '⏭️' || '❌' }}"}
                  ]
                }
              ]
            }
        env:
          # SECURITY: Webhook URL for Slack integration
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
