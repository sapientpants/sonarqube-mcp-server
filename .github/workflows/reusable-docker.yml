# =============================================================================
# REUSABLE WORKFLOW: Docker Build and Security Scanning
# PURPOSE: Build Docker images and scan for vulnerabilities with Trivy
# USAGE: Called by PR and main workflows for container validation
# OUTPUTS: Security findings uploaded to GitHub Security tab, Docker image artifact
# =============================================================================

name: Reusable Docker

on:
  workflow_call:
    inputs:
      platforms:
        description: 'Docker platforms to build (e.g., linux/amd64,linux/arm64)'
        type: string
        default: 'linux/amd64' # Single platform for PRs, multi for main
      push-image:
        description: 'Whether to push image to registry (always false for this workflow)'
        type: boolean
        default: false
      save-artifact:
        description: 'Whether to save Docker image as artifact for later use'
        type: boolean
        default: false
      artifact-name:
        description: 'Name for the Docker image artifact'
        type: string
        default: 'docker-image'
      version:
        description: 'Version tag for the Docker image'
        type: string
        default: ''
      image-name:
        description: 'Docker image name (without registry)'
        type: string
        default: 'sonarqube-mcp-server'
    outputs:
      image-digest:
        description: 'Docker image digest'
        value: ${{ jobs.docker.outputs.digest }}
      artifact-name:
        description: 'Name of the saved artifact'
        value: ${{ jobs.docker.outputs.artifact-name }}

# SECURITY: Required permissions for Docker operations
permissions:
  contents: read # Read source code
  security-events: write # Upload Trivy scan results
  packages: write # For GitHub Container Registry (if needed)

jobs:
  docker:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      artifact-name: ${{ inputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # =============================================================================
      # DOCKER SETUP
      # Configure build environment for single or multi-platform builds
      # =============================================================================

      - name: Set up QEMU
        # Required for multi-platform builds (arm64)
        if: contains(inputs.platforms, 'arm64')
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Advanced Docker builder with cache support
        uses: docker/setup-buildx-action@v3

      # =============================================================================
      # DOCKER BUILD
      # Build image with layer caching for efficiency
      # =============================================================================

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image-name }}
          tags: |
            type=raw,value=${{ inputs.version }},enable=${{ inputs.version != '' }}
            type=raw,value=latest,enable=${{ inputs.version != '' }}
            type=ref,event=pr
            type=sha,format=short

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          push: false # Never push from this reusable workflow
          # Can only load single-platform images; for multi-platform, use outputs
          load: ${{ !inputs.save-artifact && !contains(inputs.platforms, ',') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Use GitHub Actions cache
          cache-to: type=gha,mode=max # Maximum cache retention
          build-args: |
            VERSION=${{ inputs.version || github.sha }}
          # Output to tar for artifact or multi-platform scanning
          outputs: ${{ (inputs.save-artifact || contains(inputs.platforms, ',')) && format('type=docker,dest={0}-{1}.tar', inputs.artifact-name, github.sha) || '' }}

      # =============================================================================
      # SECURITY SCANNING
      # Trivy vulnerability scanning with configurable severity
      # =============================================================================

      - name: Run Trivy vulnerability scanner
        # SECURITY: Scan image for vulnerabilities before any distribution
        # FAILS IF: Critical or high vulnerabilities found (configurable)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          # Scan tar file if multi-platform or saving artifact; otherwise scan loaded image
          input: ${{ (inputs.save-artifact || contains(inputs.platforms, ',')) && format('{0}-{1}.tar', inputs.artifact-name, github.sha) || '' }}
          image-ref: ${{ (!inputs.save-artifact && !contains(inputs.platforms, ',')) && format('{0}:latest', inputs.image-name) || '' }}
          format: 'sarif' # GitHub Security format
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH' # Fail on serious vulnerabilities
          ignore-unfixed: false # Include unfixed CVEs
          exit-code: '1' # Fail workflow if vulnerabilities found
          trivyignores: '.trivyignore' # Use ignore file for false positives

      - name: Upload Trivy results to GitHub Security
        # Always upload results, even if scan fails
        # Results viewable at: Security > Code scanning alerts
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-scan-${{ github.event_name }}'

      # =============================================================================
      # ARTIFACT STORAGE
      # Save Docker image for reuse in publish workflow
      # =============================================================================

      - name: Compress Docker image artifact
        # Compress the tar file to reduce storage costs
        if: inputs.save-artifact
        run: |
          echo "Compressing Docker image artifact..."
          gzip -9 ${{ inputs.artifact-name }}-${{ github.sha }}.tar
          ls -lh ${{ inputs.artifact-name }}-${{ github.sha }}.tar.gz

      - name: Upload Docker image artifact
        # Store image for deterministic publishing
        if: inputs.save-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}-${{ github.sha }}
          path: ${{ inputs.artifact-name }}-${{ github.sha }}.tar.gz
          retention-days: 7 # Keep for a week (enough for release cycle)
          compression-level: 0 # Already compressed with gzip

      # =============================================================================
      # SUPPLY CHAIN SECURITY
      # Generate attestations for build provenance (main builds only)
      # =============================================================================

      - name: Generate attestations
        # Creates cryptographic proof of build provenance (SLSA Level 3)
        if: inputs.save-artifact && inputs.version != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ inputs.artifact-name }}-${{ github.sha }}.tar.gz
